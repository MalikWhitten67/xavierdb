//@ts-nocheck
import Database from "bun:sqlite";
import jwt from 'jsonwebtoken'
import fs from "fs"; 
var Bun = globalThis.Bun;
class CRUD {
  private db: Database;
  private token_Store: any[];
  private deepCounter: number;
  private schemas: any[
    {
      name: string,
      fields: Object,
      required:string[],
      auth:boolean,
      relations:any[]
    }
  ];
  constructor() {
   this.db = new Database(":memory:"); 
   setTimeout(() => {
    this.syncWithDisk();
   }, 0);
    this.schemas = [];
    this.token_Store = [];
    this.events = [];
    this.cache = new Map();
    setInterval(() => {
      this.sync();
    }, 1000 * 60 * 5); // 5 minutes
    this.deepCounter = 0;
    this.currentlyProccessing = ""
  }

   
  public forceSync() {
    this.sync();
  }

  private tableExists(tableName: string) {
    return (
      this.db
        .prepare(
          `SELECT count(*) as count FROM sqlite_master WHERE type='table' AND name='${tableName}'`
        )
        .get().count > 0
    );
  }

  private syncWithDisk() {
    const target = process.cwd() + "/data/db.sqlite";
    if (!fs.existsSync(target)) {
      return;
    }
    const dbt = new Database(target);  
    this.SyncData(dbt, this.db);
  }

   
  private async SyncData(copy: Database, target: Database){ 
    // remove tables that are not in the schema
    const targetTables = target.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
    const schemaTables = this.schemas.map((schema) => schema.name); 
    const tables = copy.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
     
    for (const tableObj of tables) {
        const table = tableObj.name;
        const fields = copy.prepare(`PRAGMA table_info(${table})`).all();
        const fieldsString = fields.map((f) => `${f.name} ${f.type}`).join(", ");
        target.prepare(`CREATE TABLE IF NOT EXISTS ${table} (${fieldsString})`).run(); 

        // Fetch data from the copy
        const copyData = copy.prepare(`SELECT * FROM ${table}`).all();

        for (const record of copyData) {
            const recordId = record.id;
            const targetRecord = target.prepare(`SELECT * FROM ${table} WHERE id = ?`).get(recordId);

            if (!targetRecord) {
                // Insert new record if not exists in target
                const keys = Object.keys(record);
                const values = Object.values(record).map(value => {
                    if (value === null) return "NULL";
                    if (typeof value === "object") return JSON.stringify(value);
                    if (value === undefined) return "NULL";
                    return typeof value === "string" ? `'${value}'` : value;
                });

                const queryString = `INSERT INTO ${table} (${keys.join(", ")}) VALUES (${values.join(", ")})`;
                target.prepare(queryString).run();
            } else {
                // Update existing records if necessary
                const copyKeys = Object.keys(record);
                for (const key of copyKeys) {
                    if (record[key] !== targetRecord[key]) {
                        const value = record[key] === null ? "NULL" :
                                      typeof record[key] === "object" ? JSON.stringify(record[key]) :
                                      typeof record[key] === "string" ? `'${record[key]}'` : record[key];

                        target.prepare(`UPDATE ${table} SET ${key} = ${value} WHERE id = ?`).run(recordId);
                    }
                }
            }
        }

        // Fetch target schema
        const schema = this.schemas.find((schema)=> schema.name === table);

        if (schema) {
            // Remove columns that are not in the schema
            const targetFields = target.prepare(`PRAGMA table_info(${table})`).all();
            for (const field of targetFields) {
                if (!schema.fields.hasOwnProperty(field.name)) { 
                    target.prepare(`ALTER TABLE ${table} DROP COLUMN ${field.name}`).run();
                }
            }
            

            // Add columns that are in the schema but not in the target table
            for (const fieldName in schema.fields) {
                if (!targetFields.find((f) => f.name === fieldName) && !fieldName.includes('error')) {
                    target.prepare(`ALTER TABLE ${table} ADD COLUMN ${fieldName} ${schema.fields[fieldName]}`).run();
                }
            }

            
        }
    }
}


  private sync() {
    fs.mkdirSync(process.cwd() + "/data", { recursive: true });
    const dbt = new Database(process.cwd() + "/data/db.sqlite"); 
    this.SyncData(this.db, dbt);
  }

  schema(data: any) {
    if (!data.name) {
      throw new Error("Name is required");
    }
    if (!data.fields) {
      throw new Error("Fields are required");
    }
 
    data.fields["id"] = "TEXT PRIMARY KEY";
    data.fields["created_at"] =  "TEXT";
    data.fields["updated_at"] = "TEXT";
    if (data.auth) {
      data.fields["verified"] = "BOOLEAN";
      data.fields["password"] = "TEXT";
      data.fields["email"] = "TEXT";
      data.fields["oauth_provider"] = "TEXT";
      data.fields["emailVisible"] = "BOOLEAN";
    }
    const fields = Object.entries(data.fields)
     .filter(([key, value]) => key !== "error")
      .map(([key, value], index) => { 
        if(value === "string") value = "TEXT";
        if(value === "number") value = "INTEGER";
        if(value === "boolean") value = "BOOLEAN";
        if(value === "object") value = "TEXT"; 
        return `${key} ${value.replace(",", "")}`;
      }).join(", ")
       
    this.db
      .prepare(`CREATE TABLE IF NOT EXISTS ${data.name} (${fields})`)
      .run(); 

    // Store schema for future reference
    this.schemas.push(data);

    this.sync(); 
    return {
      $: {
        name: data.name,
        required: data.required || [],
        fields: data.fields,
        auth: data.auth || false,
        relations: data.relations || null,
      }, 
      events: [],
      ...this.collection(data.name),
    };
  }

  error(error: any) {
    let logs = fs.createWriteStream(process.cwd() + "/data/logs.txt", {
      flags: "a",
    });
    logs.write(`${new Date().toISOString()} - ${error}
`);
  }

   jwt = {
    verify: async (token: string) => {
       try {
          jwt.verify(token, process.env.TOKEN_SECRET);
          return  true
       } catch (error) {
         return false;
       }
    },
    decode: async (token) => {
      return jwt.decode(token);
    },
    create: async (data: any) => {
      return jwt.sign(data, process.env.TOKEN_SECRET, {expiresIn: process.env.TOKEN_EXPIRY || "1h"});
    } 
  }

  recursiveRelations(data: any, collection: any, colname: string, visited?: Set<string> = new Set()) {
    if (visited.has(colname)) { 
        return data;
    }

    if (this.deepCounter > 3) { 
        return data;
    }

    visited.add(colname);

    for (const r in collection) {
        if (r === "name" || r === "auth") { 
          continue;
        }
      
        const relation = collection[r];
        try {
          data[relation.using] = JSON.parse(data[relation.using]);
        }
        catch (e) {
           
        }

        const relatedCollection = this.schemas.find((schema) => schema.name === relation.relatedCollection);

        if (!relatedCollection) continue;

        this.deepCounter++;
        const cacheKey = `${colname}_${relation.relatedCollection}_${data[relation.using]}`;
        let relatedData = null;

        if (!relatedData) { 
            relatedData = this.collection(relation.relatedCollection).findOne(data[relation.using]); 
        }
 
        this.deepCounter--;

        if (Array.isArray(data[relation.using])) {
            const related = data[relation.using].map((id: string) => { 
                return this.collection(relation.relatedCollection).findOne(id);
            });
            if (!data.expand) data.expand = {};
            data.expand[relation.using] = related;
        } else {
            if (data[relation.using]) { 
                data.expand = { ...data.expand, [relation.using]: relatedData };
            }
        }
    }

    visited.delete(colname);

    return data;
}



  
  collection(name: string) { 
    const schema = this.schemas.find((schema) => schema.name === name);

    if (!schema) {
        return {
            error: "Collection not found"
        };
    }

    return {
        fields: schema.fields,
      name: name, 
       auth:{
        isValid: async (token: string) => {
          return jwt.verify(token, process.env.TOKEN_SECRET);
        },
        decode: async (token: string) => {
          return jwt.decode(token);
        },
      }, 
      findOne: (id: string) => {  
        if(!this.schemas.find((schema) => schema.name === name)) return {error: "Collection not found"};
        let schema = this.schemas.find((schema) => schema.name === name);    
        if(!id || id.includes("[") || id.includes("{"))  { 
          return null;
        };
        let data  = this.db.prepare(`SELECT * FROM ${name} WHERE id = "${id}"`).get() as any; 
        if(!data) return null;
         if(data){
          if(schema.relations){  
            data = this.recursiveRelations(data, schema.relations, name);
          }
          if(schema.auth){
            if(data.hasOwnProperty("password")) delete data.password;
            if (data.hasOwnProperty("emailVisible") && !data.emailVisible) delete data.email;
          } 
         }
        return  data || null;
      },
      getPassword: (id: string) => {
        let schema = this.schemas.find((schema) => schema.name === name);
        if(!schema.auth) return {error: "Auth is not enabled for this collection"};
        let data = this.db.prepare(`SELECT * FROM ${name} WHERE id = "${id}"`).get();
        if(!data) return {error: "Record not found"};  
        return data.password;
      },
      on(event: string, callback: Function) {
    if (event === "error") {
      process.on("uncaughtException", (error) => {
        callback(error);
      });
    }  
    this.events.push({ event, callback });
  },
      insertOne: async (data: any) => {
        data["id"] = data["id"] || crypto.randomUUID();
        data["created_at"] = data["created_at"] || new Date().toISOString();
        data["updated_at"] = data["updated_at"] || new Date().toISOString();
        let schema = this.schemas.find((schema) => schema.name === name);
        if(schema.required){
          for(var r in schema.required){
            if(!data.hasOwnProperty(schema.required[r])){
              return {error: `${schema.required[r]} is required`};
            }
          }
        }
        // REMOVE any fields that are not in the schema
        for(var dtf in data){
          if(!schema.fields.hasOwnProperty(dtf)){
            delete data[dtf];
          }
        } 
        if(schema.auth){
          if(!data.email || !data.password) return {error: "Email and password are required"};
          if(!data.email.includes("@")) return {error: "Invalid email"};
          if(!process.env.TOKEN_SECRET) throw new Error("TOKEN_SECRET is required in .env"); 
          data.password = await Bun.password.hash(data.password);
          data.emailVisible = data.emailVisible || false;
        }
        for(var df in data){
          if(typeof data[df] === "object"){
            data[df] = JSON.stringify(data[df]);
          }
          if(data[df] === undefined || data[df] === null){
            data[df] = "0"
          }
        }
      
        const keys = Object.keys(data);
        const values = Object.values(data);
        const valuesString = values.map((value) => {
          if(value === null) return "NULL";
          if(typeof value === "object") return JSON.stringify(value); 
          if(value === undefined) return "NULL";
          return typeof value === "string" ? `'${value}'` : value;
        }); 
        const queryString = `INSERT INTO ${name} (${keys.join(
          ", "
        )}) VALUES (${valuesString.join(", ")})`;
        this.db.prepare(queryString).run();
        let d = this.db
          .prepare(`SELECT * FROM ${name} WHERE id = "${data.id}"`)
          .get();
        globalThis.wssClients.forEach((client) => {
          client.send(
            JSON.stringify({
              event: "insert",
              collection: name,
              data: d,
            })
          );
        }
        );
        delete d.password;
        if (!d.emailVisible) delete d.email;
        setTimeout(() => {
          this.sync()
        },  1000);
        this.events.forEach((event) => {
          if (event.event === "change") {
            event.callback(d);
          }
        });
        Object.keys(d).forEach((key) => {
          if (typeof d[key] === "string") {
            try {
              d[key] = JSON.parse(d[key]);
            } catch (e) {}
          }
        })  
        if(schema.relations){
          d = this.recursiveRelations(d, schema.relations, name);
        }
        return d;
      },
       
      authWithPassword: async (data:{EmailOrUsername: string, password: string}) => {
        if(!this.schemas.find((schema) => schema.name === name).auth) return {error: "Auth is not enabled for this collection"};
        let { EmailOrUsername , password} = data;
        
        if (!EmailOrUsername || !password){
          var missing = !EmailOrUsername ? "email" : !password ? "password" : null;
          return { error: `${missing} is required` , code: 400, missing: missing}; 
        }
        let isEmail = EmailOrUsername.includes("@");
        if(EmailOrUsername.includes("@")){
          const verifyEmail = (email: string) => {
            let isVerified = email.match(
              /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,6}$/
            )
              ? true
              : false;
            return isVerified;
          };
          
          !verifyEmail(EmailOrUsername) ? { error: "Invalid email" } : null;
        }
 
   
        let user = this.db.prepare(`SELECT * FROM ${name} WHERE ${isEmail ? "email" : "username"} = "${EmailOrUsername}"`).get();
        if(!user) return {error: "User not found"};
        if(!process.env.TOKEN_SECRET) throw new Error("TOKEN_SECRET is required in .env"); 
        if(!process.env.TOKEN_SECRET) throw new Error("TOKEN_SECRET is required in .env"); 
        if (!(await Bun.password.verify(password, user.password))) return { error: "Invalid password" };
        delete user.password;  
        user.token =  jwt.sign(user, process.env.TOKEN_SECRET, {expiresIn: process.env.TOKEN_EXPIRY || "1h"});
        this.token_Store.push(user);
        return user;
      },
      authWithToken: async (token: string) => {
        if(!this.schemas.find((schema) => schema.name === name).auth) return {error: "Auth is not enabled for this collection"};
        if(!token) return {error: "Token is required"};
        let user = this.token_Store.find((u) => u.token === token);
        if(!user) return {error: "Invalid token or token has expired"};
        return user;
      },

      upload: async (data: any, {filename, collection}) => {
        if (!fs.existsSync(process.cwd() + "/uploads")) fs.mkdirSync(process.cwd() + "/uploads", {recursive: true});
        let id = crypto.randomUUID();
        let extension = filename.split('.').pop(); // Extract file extension
        let path = process.cwd() + "/uploads/" + collection + "/" + id + '.' + extension; // Use extracted extension
        fs.mkdirSync(process.cwd() + "/uploads/" + collection, {recursive: true}); 
        await Bun.write(path, data);
        return {id, path: path.replace(process.cwd(), ""), url: `files/${collection}/${id}.${extension}`};
    },

     
    
      
      match: (query: Object, options: { sort: 'asc' | 'desc', limit: number }) => {
      const conditions: any[] = [];
      let schema = this.schemas.find((schema) => schema.name === name);
      const params: any[] = [];
      query = query || {}; 
      query = query.where;
      for (var q in query) {
         let value = query[q];
         if(value.hasOwnProperty("contains")){ 
            let contains = value.contains;
            if(typeof contains === "object"){
              for(var c in contains){
                conditions.push(`${q} LIKE ?`);
                params.push(`%${contains[c]}%`);
              }
            }
            conditions.push(`${q} LIKE ?`);
            params.push(`%${contains}%`);
         } 
         if(value.hasOwnProperty("equals")){
            conditions.push(`${q} = ?`);
            params.push(value.equals);
         }
          if(value.hasOwnProperty("greaterThan")){
            conditions.push(`${q} > ?`);
            params.push(value.greaterThan);
          }
          if(value.hasOwnProperty("lessThan")){ 
            conditions.push(`${q} < ?`);
            params.push(value.lessThan);
          }
          if(value.hasOwnProperty("greaterThanOrEquals")){ 
            let value = value.greaterThanOrEquals;
            conditions.push(`${q} >= ?`);
            params.push(value);
          }
          if(value.hasOwnProperty("lessThanOrEquals")){  
            conditions.push(`${q} <= ?`);
            params.push(value.lessThanOrEquals);
          }
          if(value.hasOwnProperty("in")){
            conditions.push(`${q} IN (${value.in.map((v) => "?").join(", ")})`);
            params.push(...value.in);
          }
          if(value.hasOwnProperty("notIn")){
            conditions.push(`${q} NOT IN (${value.notIn.map((v) => "?").join(", ")})`);
            params.push(...value.notIn);
          }
          if(value.hasOwnProperty("notEquals")){
            conditions.push(`${q} != ?`);
            params.push(value.notEquals);
          }
          if(value.hasOwnProperty("notContains")){
            if(typeof value.notContains === "object"){
              for(var c in value.notContains){
                conditions.push(`${q} NOT LIKE ?`);
                params.push(`%${value.notContains[c]}%`);
              } 
              conditions.push(`${q} NOT LIKE ?`);
              params.push(`%${value.notContains}%`);
          }

      }
       
      }
      var where = conditions.join(" AND ");
      if (where === "") where = "1 = 1";
      let queryString = `SELECT * FROM ${name} ${where === "1 = 1" ? "" : "WHERE " + where} ORDER BY created_at ${options.sort} LIMIT ${options.limit}`;
      let dt = this.db.prepare(queryString).all(params);
  
      dt = dt.map((d) => { 
        Object.keys(d).forEach((key) => {
          if (typeof d[key] === "string") {
            try {
              d[key] = JSON.parse(d[key]);
            } catch (e) {}
          }
        })  
        if(schema.relations){ 
          d = this.recursiveRelations(d, schema.relations, name);
        }
        
        if(schema.auth){
          if(!d.emailVisible) delete d.email;
          delete d.password;
        }
        return d;
      }); 
      return dt || [];
     },
  
      /**
       * Get all records in the collection
       */
      getAll: () => {
        
        let data = this.db.prepare(`SELECT * FROM ${name}`).all();
        let schema = this.schemas.find((schema) => schema.name === name);
        if(schema.auth){
          data = data.filter((d) => d.emailVisible);
          data = data.map((d) => { delete d.email; return d; });
          data = data.map((d) => { delete d.password; return d; });
        }
        if (schema.relations) {
          for (var r in schema.relations) {
              let relation = schema.relations[r];
              let collection = this.collection(relation.relatedCollection);
              dt = dt.map((d) => {
                  try {
                      d[relation.using] = JSON.parse(d[relation.using]);
                  } catch (e) {}
                  if (Array.isArray(d[relation.using])) {
                      let related = [];
                      for (var u in d[relation.using]) {
                          related.push(collection.findOne(d[relation.using][u]));
                      } 
                      if (!d.expand) d.expand = {};
                      d.expand = { ...d.expand, [relation.relatedCollection]: related };
                  } else {
                      if (d[relation.using]) {
                          let related = collection.findOne(d[relation.using]);  
                          if(!related) return d;
                          if (!d.expand) d.expand = {};
                          d.expand = { ...d.expand, [relation.using]: related }; // Push related data as object
                      }
                  }
                  return d;
              });
          }
      }
        return data;
      },
      delete: (id: string) => { 
        let exists = this.db.prepare(`SELECT * FROM ${name} WHERE id = "${id}"`).get();
        if(!exists) return {error: "Record not found"}; 
        

        this.db.prepare(`DELETE FROM ${name} WHERE id = "${id}"`).run();
        globalThis.wssClients.forEach((client) => {
          client.send(
            JSON.stringify({
              event: "delete",
              collection: name,
              data: { id },
            })
          );
        });
         this.events.forEach((event) => {
          if (event.event === "change") {
            event.callback(d);
          }
        });
        return { id };
      }, 
      update: (id: string, data: any) => {   
        let schema = this.schemas.find((schema) => schema.name === name);
        data["updated_at"] = new Date().toISOString();  
        const keys = Object.keys(data);
        const values = Object.values(data);
 
        const valuesString = values.map((value) => {
          if(value === null) return "NULL";
          if(typeof value === "object") return JSON.stringify(value);
          if(value === undefined) return "NULL";
          return typeof value === "string" ? `'${value}'` : value;
        });
 
        const set = keys
          .map((key, index) => {
            if(valuesString[index].includes("[") || valuesString[index].includes("{")){
              return `${key} = '${valuesString[index]}'`;
            }
            return `${key} = ${valuesString[index]}`;
          })
          .join(", ");
 
        let record = this.db.prepare(`SELECT * FROM ${name} WHERE id = "${id}"`).get();
        if(!record) return {error: "Record not found"};   
        this.db.prepare(`UPDATE ${name} SET ${set} WHERE id = "${id}"`).run();
        let d = this.db.prepare(`SELECT * FROM ${name} WHERE id = "${id}"`).get();
        globalThis.wssClients.forEach((client) => {
          client.send(
            JSON.stringify({
              event: "update",
              collection: name,
              data: d,
            })
          );
        });   
        if(schema.auth){
          delete d.password;
          delete d.email;
        }
        if(schema.relations){ 
          d = this.recursiveRelations(d, schema.relations, name);
        }
        this.sync();
       this.events.forEach((event) => {
          if (event.event === "change") {
            event.callback(d);
          }
        });
        return d;
      },
      
      updateMany: (query: any, data: any) => {
        let schema = this.schemas.find((schema) => schema.name === name);
        let records = this.db.prepare(`SELECT * FROM ${name} WHERE ${Object.keys(query).map((k) => `${k} = ?`).join(" AND ")}`).all(Object.values(query));
        if(records.length === 0) return {error: "No records found"};
        for(var r in records){
          if(query.id === records[r].id) continue;  
          let record = records[r];
          record["updated_at"] = new Date().toISOString();
          if(schema.auth){ 
            delete record.password;
            delete record.email;
          }
          if (schema.relations) {
            record = this.recursiveRelations(record, schema.relations);
           }
          const keys = Object.keys(data);
          const values = Object.values(data);
          const valuesString = values.map((value) => {
            if(value === null) return "NULL";
            if(typeof value === "object") return JSON.stringify(value);
            if(value === undefined) return "NULL";
            return typeof value === "string" ? `'${value}'` : value;
          });
          const set = keys
            .map((key, index) => {
              return `${key} = ${valuesString[index]}`;
            })
            .join(", ");
          this.db.prepare(`UPDATE ${name} SET ${set} WHERE id = "${record.id}"`).run();
        }
        let d = this.db.prepare(`SELECT * FROM ${name} WHERE ${Object.keys(query).map((k) => `${k} = ?`).join(" AND ")}`).all(Object.values(query));
        globalThis.wssClients.forEach((client) => {
          client.send(
            JSON.stringify({
              event: "update",
              collection: name,
              data: d,
            })
          );
        });
         this.events.forEach((event) => {
          if (event.event === "change") {
            event.callback(d);
          }
        });
        return d;
      },

      deleteMany: (query: any) => {
        let schema = this.schemas.find((schema) => schema.name === name);
        let records = this.db.prepare(`SELECT * FROM ${name} WHERE ${Object.keys(query).map((k) => `${k} = ?`).join(" AND ")}`).all(Object.values(query));
        if(records.length === 0) return {error: "No records found"};
        for(var r in records){
          let record = records[r];
          this.db.prepare(`DELETE FROM ${name} WHERE id = "${record.id}"`).run();
        }
        globalThis.wssClients.forEach((client) => {
          client.send(
            JSON.stringify({
              event: "delete",
              collection: name,
              data: records,
            })
          );
        });
       this.events.forEach((event) => {
          if (event.event === "change") {
            event.callback(d);
          }
        });
        return true;
      },    

      count: () => {   
        return this.db.prepare(`SELECT count(*) as count FROM ${name}`).get().count;
      },
    };
  }
}

export default new CRUD();